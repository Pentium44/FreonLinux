#!/bin/bash
# Build Freon Linux software from source.
# Version: 0.1.0
# (C) Chris Dorman, 2018 GPLv3+

#### Variables ###
# mirrors
tccmirror="http://download.savannah.gnu.org/releases/tinycc"
nanomirror="https://www.nano-editor.org/dist/v3"
chttpdmirror="https://github.com/Pentium44/chttpd.git"
ncursesmirror="https://ftp.gnu.org/pub/gnu/ncurses"
bashmirror="https://ftp.gnu.org/gnu/bash"
zlibmirror="https://zlib.net"
termcapmirror="https://ftp.gnu.org/gnu/termcap"

# filenames
tcc="tcc-0.9.27.tar.bz2"
nano="nano-3.1.tar.xz"
ncurses="ncurses-6.1.tar.gz"
bash="bash-5.0.tar.gz"
zlib="zlib-1.2.11.tar.xz"
termcap="termcap-1.3.1.tar.gz"

# folders
tmpdir="`pwd`/pkgsrc"
softwaredir="`pwd`/src/rootfs"
tccsrcdir=${tcc//.tar.bz2}
nanosrcdir=${nano//.tar.xz}
ncursessrcdir=${ncurses//.tar.gz}
bashsrcdir=${bash//.tar.gz}
zlibsrcdir=${zlib//.tar.xz}
termcapsrcdir=${termcap//.tar.gz}

# Build simple C toolchain for Freon Linux (tcc)

if [ ! -d "$tmpdir" ]; then
  echo "Warning: package source directory not found, creating."
  mkdir $tmpdir > /dev/null 2>&1
fi

cd $tmpdir

bash()
{
	# Downloading TCC source
        if [ ! -f "$bash" ]; then
                echo "Downloading bash sources..."
                wget $bashmirror/$bash
                tar -xf $bash
        fi

	cd $bashsrcdir
        ./configure --prefix=$softwaredir \
        --without-bash-malloc
        make -j20
        make install
	cd ..
}

tcc()
{
	# Downloading TCC source
	if [ ! -f "$tcc" ]; then
		echo "Downloading TCC sources..."
		wget $tccmirror/$tcc
		tar -xf $tcc
	fi

	# Configure TCC
	cd $tccsrcdir
	./configure --prefix=$softwaredir

	# Compile
	make -j20
	make install
	cd ..
	sleep 2
}

termcap()
{
	# Downloading termcap source
        if [ ! -f "$termcap" ]; then
                echo "Downloading termcap sources..."
                wget $termcapmirror/$termcap
                tar -xf $termcap
        fi

        # Configure TCC
        cd $termcapsrcdir
        ./configure --prefix=$softwaredir --with-shared --without-normal 

        # Compile
        make -j20
        make install
        cd ..

}

nano()
{
	# Downloading nano source
	if [ ! -f "$nano" ]; then
		echo "Downloading nano editor sources..."
		wget $nanomirror/$nano
		tar -xf $nano
	fi

	# Confingure
	cd $nanosrcdir
	./configure --prefix=$softwaredir

	# Compile
	make -j20
	make install
	cd ..
}

ncurses()
{
	# Downloading nano source
        if [ ! -f "$ncurses" ]; then
                echo "Downloading ncurses sources..."
                wget $ncursesmirror/$ncurses
                tar -xf $ncurses
        fi

	# Configure
	cd $ncursessrcdir
	./configure --prefix=$softwaredir \
		--with-shared \
		--without-debug \
		--without-normal \
		--enable-widec 

	# Compile
	make -j20
	make install

	make distclean
	./configure --prefix=/usr    \
            --with-shared    \
            --without-normal \
            --without-debug  \
            --without-cxx-binding \
            --with-abi-version=5 \
	    --with-versioned-syms

	make sources libs
	cp -av lib/lib*.so.5* ../../src/rootfs/lib

	cd ../../src/rootfs/lib

	ln -s libncurses.so.6 libtinfo.so.6
	ln -s libtinfo.so.6 libtinfo.so

	ln -s libncurses.so.5 libtinfo.so.5 
        ln -s libtinfo.so.5 libtinfo.so

	cd ../../../pkgsrc
}

zlib()
{
        # Downloading zlib source
        if [ ! -f "$zlib" ]; then
                echo "Downloading zlib sources..."
                wget $zlibmirror/$zlib
                tar -xf $zlib
        fi

        # Confingure
        cd $zlibsrcdir
        ./configure --prefix=$softwaredir

        # Compile
        make -j20
        make install

	mv -v ../../src/rootfs/usr/lib/libz.so.* ../../src/rootfs/lib
	ln -sfv ../../src/rootfs/lib/libz.so ../../src/rootfs/usr/lib/libz.so

        cd ..
}


chttpd()
{
	if [ ! -d "$chttpdsrcdir" ]; then
		git clone $chttpdmirror
	fi

	cd chttpd
	make -j20

        cp chttpd ../../src/rootfs/sbin/
	cp inc/chttpd.conf ../../src/rootfs/etc
	cp inc/start_chttpd ../../src/rootfs/etc/init.d
	cd ..
}

case $1 in
	all ) echo "Building all!"
		ncurses; nano; chttpd; tcc; bash; termcap; zlib;;
	* ) echo "Building $1..."
		$1;;
esac
